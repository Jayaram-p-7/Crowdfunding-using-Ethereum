{"remainingRequest":"/home/jayarap/Documents/crowdfunding/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jayarap/Documents/crowdfunding/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jayarap/Documents/crowdfunding/src/App.vue","mtime":1572264718974},{"path":"/home/jayarap/Documents/crowdfunding/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jayarap/Documents/crowdfunding/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jayarap/Documents/crowdfunding/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/jayarap/Documents/crowdfunding/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jayarap/Documents/crowdfunding/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// We import our the scripts for the smart contract instantiation, and web3\nimport crowdfundInstance from '../contracts/crowdfundInstance';\nimport crowdfundProject from '../contracts/crowdfundProjectInstance';\nimport web3 from '../contracts/web3';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      startProjectDialog: false,\n      account: null,\n      stateMap: [\n        { color: 'primary', text: 'Ongoing' },\n        { color: 'warning', text: 'Expired' },\n        { color: 'success', text: 'Completed' },\n      ],\n      projectData: [],\n      newProject: { isLoading: false },\n    };\n  },\n  mounted() {\n    // this code snippet takes the account (wallet) that is currently active\n    web3.eth.getAccounts().then((accounts) => {\n      [this.account] = accounts;\n      this.getProjects();\n    });\n  },\n  methods: {\n    getProjects() {\n      // Operations for retrieving all existing projects will be here!\n        crowdfundInstance.methods.returnAllProjects().call().then((projects) => {\n    projects.forEach((projectAddress) => {\n      const projectInst = crowdfundProject(projectAddress);\n      projectInst.methods.getDetails().call().then((projectData) => {\n        const projectInfo = projectData;\n        projectInfo.isLoading = false;\n        projectInfo.contract = projectInst;\n        this.projectData.push(projectInfo);\n      });\n    });\n  });\n    },\n    startProject() {\n      // Operations for starting a new crowdfunding project will be here!\n      this.newProject.isLoading = true;\n  crowdfundInstance.methods.startProject(\n    this.newProject.title,\n    this.newProject.description,\n    this.newProject.duration,\n    web3.utils.toWei(this.newProject.amountGoal, 'ether'),\n  ).send({\n    from: this.account,\n  }).then((res) => {\n    const projectInfo = res.events.ProjectStarted.returnValues;\n    projectInfo.isLoading = false;\n    projectInfo.currentAmount = 0;\n    projectInfo.currentState = 0;\n    projectInfo.contract = crowdfundProject(projectInfo.contractAddress);\n    this.startProjectDialog = false;\n    this.newProject = { isLoading: false };\n  });\n    },\n    fundProject(address) {\n      // Operations for funding an existing crowdfunding project will be here!\n       if (!this.projectData[index].fundAmount) {\n    return;\n  }\n\n  const projectContract = this.projectData[index].contract;\n  this.projectData[index].isLoading = true;\n  projectContract.methods.contribute().send({\n    from: this.account,\n    value: web3.utils.toWei(this.projectData[index].fundAmount, 'ether'),\n  }).then((res) => {\n    const newTotal = parseInt(res.events.FundingReceived.returnValues.currentTotal, 10);\n    const projectGoal = parseInt(this.projectData[index].goalAmount, 10);\n    this.projectData[index].currentAmount = newTotal;\n    this.projectData[index].isLoading = false;\n\n    // Set project state to success\n    if (newTotal >= projectGoal) {\n      this.projectData[index].currentState = 2;\n    }\n  });\n    },\n    getRefund(address) {\n      // Operations for getting refund (funded amount to an already expired project)\n        this.projectData[index].isLoading = true;\n  this.projectData[index].contract.methods.getRefund().send({\n    from: this.account,\n  }).then(() => {\n    this.projectData[index].isLoading = false;\n  });\n    },\n  },\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app class=\"grey lighten-3\">\n    <v-content>\n      <v-container>\n        <v-layout\n          text-xs-center\n          wrap\n        >\n          <v-flex mb-4>\n            <h1 class=\"display-2 font-weight-bold mb-3\">\n              Crowdfunding\n            </h1>\n            <p class=\"subheading font-weight-regular\">\n              Utilizing Ethereum for Decentralized Crowdfunding\n            </p>\n          </v-flex>\n        </v-layout>\n\n        <v-layout row justify-center>\n          <v-dialog v-model=\"startProjectDialog\" max-width=\"600px\" persistent>\n            <v-btn slot=\"activator\" color=\"primary\" dark>Start a Project</v-btn>\n            <v-card>\n              <v-card-title>\n                <span class=\"headline font-weight-bold mt-2 ml-4\">Bring your project to life</span>\n              </v-card-title>\n              <v-card-text class=\"pt-0\">\n                <v-container class=\"pt-0\" grid-list-md>\n                  <v-layout wrap>\n                    <v-flex xs12>\n                      <v-text-field\n                        label=\"Title\"\n                        persistent-hint\n                        v-model=\"newProject.title\">\n                      </v-text-field>\n                    </v-flex>\n                    <v-flex xs12>\n                      <v-textarea\n                        label=\"Description\"\n                        persistent-hint\n                        v-model=\"newProject.description\">\n                      </v-textarea>\n                    </v-flex>\n                    <v-flex xs12 sm6>\n                      <v-text-field\n                        label=\"Amount Needed (ETH)\"\n                        type=\"number\"\n                        step=\"0.0001\"\n                        min=\"0\"\n                        v-model=\"newProject.amountGoal\">\n                      </v-text-field>\n                    </v-flex>\n                    <v-flex xs12 sm6>\n                      <v-text-field\n                        label=\"Duration (in days)\"\n                        type=\"number\"\n                        v-model=\"newProject.duration\">\n                      </v-text-field>\n                    </v-flex>\n                  </v-layout>\n                </v-container>\n              </v-card-text>\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn\n                  color=\"blue darken-1\"\n                  flat\n                  @click=\"startProjectDialog = false;\n                  newProject.isLoading = false;\">\n                  Close\n                </v-btn>\n                <v-btn color=\"blue darken-1\"\n                  flat\n                  @click=\"startProject\"\n                  :loading=\"newProject.isLoading\">\n                  Save\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-dialog>\n        </v-layout>\n      </v-container>\n\n      <v-container\n        grid-list-lg\n      >\n        <h1 class=\"display-1 font-weight-bold mb-3\">\n          Projects\n        </h1>\n        <v-layout row wrap>\n          <v-flex v-for=\"(project, index) in projectData\" :key=\"index\" xs12>\n            <v-dialog\n              v-model=\"project.dialog\"\n              width=\"800\"\n            >\n              <v-card>\n                <v-card-title class=\"headline font-weight-bold\">\n                  {{ project.projectTitle }}\n                </v-card-title>\n                <v-card-text>\n                  {{ project.projectDesc }}\n                </v-card-text>\n                <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn\n                    color=\"blue darken-1\"\n                    flat=\"flat\"\n                    @click=\"projectData[index].dialog = false\"\n                  >\n                    Close\n                  </v-btn>\n                </v-card-actions>\n              </v-card>\n            </v-dialog>\n            <v-hover>\n              <v-card\n                slot-scope=\"{ hover }\"\n                :class=\"`elevation-${hover ? 10 : 2}`\"\n              >\n                <v-card-title primary-title>\n                  <div>\n                    <div class=\"headline font-weight-bold\">\n                      <v-chip\n                        label\n                        :color=\"stateMap[project.currentState].color\"\n                        text-color=\"white\" class=\"mt-0\">\n                      {{ stateMap[project.currentState].text }}\n                      </v-chip>\n                      {{ project.projectTitle }}\n                    </div>\n                    <br/>\n                    <span>{{ project.projectDesc.substring(0, 100) }}</span>\n                    <span v-if=\"project.projectDesc.length > 100\">\n                      ... <a @click=\"projectData[index].dialog = true\">[Show full]</a>\n                    </span>\n                    <br/><br/>\n                    <small>Up Until: <b>{{ new Date(project.deadline * 1000) }}</b></small>\n                    <br/><br/>\n                    <small>Goal of <b>{{ project.goalAmount / 10**18 }} ETH </b></small>\n                    <small v-if=\"project.currentState == 1\">wasn't achieved before deadline</small>\n                    <small v-if=\"project.currentState == 2\">has been achieved</small>\n                  </div>\n                </v-card-title>\n                <v-flex\n                  v-if=\"project.currentState == 0 && account != project.projectStarter\"\n                  class=\"d-flex ml-3\" xs12 sm6 md3>\n                  <v-text-field\n                    label=\"Amount (in ETH)\"\n                    type=\"number\"\n                    step=\"0.0001\"\n                    min=\"0\"\n                    v-model=\"project.fundAmount\"\n                  ></v-text-field>\n                  <v-btn\n                    class=\"mt-3\"\n                    color=\"light-blue darken-1 white--text\"\n                    @click=\"fundProject(index)\"\n                    :loading=\"project.isLoading\"\n                  >\n                    Fund\n                  </v-btn>\n                </v-flex>\n                <v-flex class=\"d-flex ml-3\" xs12 sm6 md3>\n                  <v-btn\n                    class=\"mt-3\"\n                    color=\"amber darken-1 white--text\"\n                    v-if=\"project.currentState == 1\"\n                    @click=\"getRefund(index)\"\n                    :loading=\"project.isLoading\"\n                  >\n                    Get refund\n                  </v-btn>\n                </v-flex>\n                <v-card-actions v-if=\"project.currentState == 0\" class=\"text-xs-center\">\n                  <span class=\"font-weight-bold\" style=\"width: 200px;\">\n                    {{ project.currentAmount / 10**18 }} ETH\n                  </span>\n                  <v-progress-linear\n                    height=\"10\"\n                    :color=\"stateMap[project.currentState].color\"\n                    :value=\"(project.currentAmount / project.goalAmount) * 100\"\n                  ></v-progress-linear>\n                  <span class=\"font-weight-bold\" style=\"width: 200px;\">\n                    {{ project.goalAmount / 10**18 }} ETH\n                  </span>\n                </v-card-actions>\n              </v-card>\n            </v-hover>\n          </v-flex>\n        </v-layout>\n      </v-container>\n    </v-content>\n  </v-app>\n</template>\n\n<script>\n// We import our the scripts for the smart contract instantiation, and web3\nimport crowdfundInstance from '../contracts/crowdfundInstance';\nimport crowdfundProject from '../contracts/crowdfundProjectInstance';\nimport web3 from '../contracts/web3';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      startProjectDialog: false,\n      account: null,\n      stateMap: [\n        { color: 'primary', text: 'Ongoing' },\n        { color: 'warning', text: 'Expired' },\n        { color: 'success', text: 'Completed' },\n      ],\n      projectData: [],\n      newProject: { isLoading: false },\n    };\n  },\n  mounted() {\n    // this code snippet takes the account (wallet) that is currently active\n    web3.eth.getAccounts().then((accounts) => {\n      [this.account] = accounts;\n      this.getProjects();\n    });\n  },\n  methods: {\n    getProjects() {\n      // Operations for retrieving all existing projects will be here!\n        crowdfundInstance.methods.returnAllProjects().call().then((projects) => {\n    projects.forEach((projectAddress) => {\n      const projectInst = crowdfundProject(projectAddress);\n      projectInst.methods.getDetails().call().then((projectData) => {\n        const projectInfo = projectData;\n        projectInfo.isLoading = false;\n        projectInfo.contract = projectInst;\n        this.projectData.push(projectInfo);\n      });\n    });\n  });\n    },\n    startProject() {\n      // Operations for starting a new crowdfunding project will be here!\n      this.newProject.isLoading = true;\n  crowdfundInstance.methods.startProject(\n    this.newProject.title,\n    this.newProject.description,\n    this.newProject.duration,\n    web3.utils.toWei(this.newProject.amountGoal, 'ether'),\n  ).send({\n    from: this.account,\n  }).then((res) => {\n    const projectInfo = res.events.ProjectStarted.returnValues;\n    projectInfo.isLoading = false;\n    projectInfo.currentAmount = 0;\n    projectInfo.currentState = 0;\n    projectInfo.contract = crowdfundProject(projectInfo.contractAddress);\n    this.startProjectDialog = false;\n    this.newProject = { isLoading: false };\n  });\n    },\n    fundProject(address) {\n      // Operations for funding an existing crowdfunding project will be here!\n       if (!this.projectData[index].fundAmount) {\n    return;\n  }\n\n  const projectContract = this.projectData[index].contract;\n  this.projectData[index].isLoading = true;\n  projectContract.methods.contribute().send({\n    from: this.account,\n    value: web3.utils.toWei(this.projectData[index].fundAmount, 'ether'),\n  }).then((res) => {\n    const newTotal = parseInt(res.events.FundingReceived.returnValues.currentTotal, 10);\n    const projectGoal = parseInt(this.projectData[index].goalAmount, 10);\n    this.projectData[index].currentAmount = newTotal;\n    this.projectData[index].isLoading = false;\n\n    // Set project state to success\n    if (newTotal >= projectGoal) {\n      this.projectData[index].currentState = 2;\n    }\n  });\n    },\n    getRefund(address) {\n      // Operations for getting refund (funded amount to an already expired project)\n        this.projectData[index].isLoading = true;\n  this.projectData[index].contract.methods.getRefund().send({\n    from: this.account,\n  }).then(() => {\n    this.projectData[index].isLoading = false;\n  });\n    },\n  },\n};\n</script>\n"]}]}